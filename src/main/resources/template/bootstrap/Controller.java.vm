package ${package}.${moduleName}.controller;

import java.util.*;


import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.web.bind.annotation.*;
import com.alibaba.dubbo.config.annotation.Reference;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import ${mainPath}.common.base.BaseController;
import ${mainPath}.common.result.PageInfo;

import ${package}.${moduleName}.entity.${className};
import ${package}.${moduleName}.service.I${className}Service;
import javax.validation.Valid;





/**
 * ${comments}
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(value = "${comments}接口", tags = {"${comments}接口"})
@Controller
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller extends BaseController {

    @Reference(application = "${dubbo.application.id}", group = "ZXPlatform")
    private I${className}Service ${classname}Service;
    
    
    /**
     *  数据列表
     * @return
     */
    @RequestMapping("/manager")
    public String manager() {
        return "${moduleName}/${pathName}";
    }


    /**
     * 列表
     */
    @ApiOperation(value = "${comments}列表", notes = "${comments}列表")
    @RequiresPermissions("${moduleName}/${pathName}/dataGrid")
    @RequestMapping("/dataGrid")
    @ResponseBody
    public Object list(Integer offset, Integer limit, String sort, String order){
        PageInfo pageInfo = new PageInfo(offset, limit, sort, order);
        Map<String, Object> condition = new HashMap<String, Object>();
        pageInfo.setCondition(condition);
        PageInfo<Map<String, Object>> page = ${classname}Service.selectDataGrid(pageInfo);
        return page;
    }

  
    /**
     * 信息
     */
    @ApiOperation(value = "获取${comments}", notes = "获取${comments}")
    @RequiresPermissions("${moduleName}/${pathName}/info")
    @GetMapping("/info/{${pk.attrname}}")
    @ResponseBody
    public Object info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
       ${className} ${classname} = ${classname}Service.selectById(${pk.attrname});
       return renderSuccess(${classname} );
    }

    /**
     * 添加/修改页
     * @return
     */
    @RequestMapping("/savePage")
    public String savePage(Model model, ${pk.attrType} ${pk.attrname}) {
        ${className} ${classname} =null;
        if(null!= ${pk.attrname}){
         ${classname} = ${classname}Service.selectById(${pk.attrname});
        }else{
         ${classname} = new ${className}();
        }
        model.addAttribute("${classname}", ${classname});
        return "${moduleName}/${pathName}Save";
    }


    /**
     * 保存/修改
     * @param ${classname}
     * @return
     */
    @ApiOperation(value = "保存/修改${comments}", notes = "保存/修改${comments}")
    @RequiresPermissions("${moduleName}/${pathName}/save")
    @PostMapping("/save")
    @ResponseBody
    public Object save(@Valid  ${className} ${classname}) {
        try {
            ${classname}.setCrtDate(new Date());
            if(null!=${classname}.get${pk.attrName}()){
               ${classname}Service.updateById(${classname});
               return renderSuccess("修改成功");
            }else{
                ${classname}Service.insert(${classname});
                return renderSuccess("添加成功");
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            return renderError("运行异常，请联系管理员");
        }
    }

    /**
     * 删除
     * @param ${pk.attrname}s
     * @return
     */
    @ApiOperation(value = "删除${comments}", notes = "删除${comments}")
    @PostMapping("/delete")
    @RequiresPermissions("${moduleName}/${pathName}/delete")
    public Object delete(${pk.attrType}[] ${pk.attrname}s) {
        try {
            ${classname}Service.deleteBatchIds(Arrays.asList(${pk.attrname}s));
            return renderSuccess("删除成功！");
        } catch (Exception e) {
            logger.error(e.getMessage());
            return renderError("运行异常，请联系管理员");
        }
    }

}
